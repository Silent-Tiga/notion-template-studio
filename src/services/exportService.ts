// 导出服务功能
import type { NotionContent } from './notionAPI';
import type { PreviewData, ExportPackage, File as CustomFile } from '../types';
import type { HTMLGeneratorOptions } from '../utils/htmlGenerator';
import type { SiteManifest } from '../types';

/**
 * 配置选项（后端已移除，此接口保留但不再使用）
 */
export interface ExportOptions {
  // 已移除后端生成，保留结构避免侵入式改动
  pageId?: string;
  apiKey?: string;
}



/**
 * 网站主题配置
 */
export interface ThemeConfig {
  primaryColor?: string;
  secondaryColor?: string;
  fontFamily?: string;
  fontSize?: string;
  backgroundColor?: string;
  textColor?: string;
  accentColor?: string;
}

/**
 * 生成HTML预览数据
 * @param notionContent Notion内容数据
 * @param theme 主题配置（可选）
 * @param options 配置选项（可选）
 * @returns PreviewData 预览数据
 */
export const generateHTML = async (notionContent: NotionContent, theme?: ThemeConfig, _options?: ExportOptions): Promise<PreviewData> => {
  try {
    // 纯前端生成HTML：不再调用后端
    const defaultTheme: ThemeConfig = {
      primaryColor: '#4F46E5',
      secondaryColor: '#8B5CF6',
      fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, sans-serif',
      fontSize: '16px',
      backgroundColor: '#ffffff',
      textColor: '#1F2937',
      accentColor: '#10B981'
    };
    const selectedTheme = { ...defaultTheme, ...theme } as ThemeConfig;

    const htmlContent = createHTMLFromNotionContent(notionContent, selectedTheme);
    const features = extractFeaturesFromContent(notionContent);

    // Single-language output enforced: English

    return {
      title: notionContent.title || 'Notion Converted Page',
      description: 'A polished webpage generated by AI Notion Converter',
      imageUrl: notionContent.coverImage || getDefaultImage(),
      features: features,
      htmlContent: htmlContent
    };
  } catch (error) {
    console.error('Error generating HTML:', error);
    throw new Error('Failed to generate HTML preview\n' + (error as Error).message);
  }
};


/**
 * 从Notion内容创建HTML
 * @param content Notion内容数据
 * @param theme 主题配置
 * @returns HTML字符串
 */
export const createHTMLFromNotionContent = (content: NotionContent, options: (Partial<HTMLGeneratorOptions> & ThemeConfig & { headingColor?: string }) = {}): string => {
  const styles = `
    body { font-family: ${options.fontFamily || 'Inter, system-ui, sans-serif'}; color: ${options.textColor || '#1f2937'}; }
    h1, h2, h3 { color: ${options.headingColor || '#111827'}; }
    .container { max-width: 800px; margin: 0 auto; padding: 20px; }
    .hero { background-color: #f3f4f6; padding: 40px; text-align: center; margin-bottom: 20px; }
    .cover { width: 100%; height: 200px; object-fit: cover; border-radius: 12px; }
    .callout { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 12px; border-radius: 8px; margin: 16px 0; }
    details { margin: 16px 0; }
    details > summary { cursor: pointer; font-weight: 600; }
    .lang-switch { display: flex; gap: 8px; margin: 12px 0 20px; }
    .lang-btn { padding: 6px 10px; border: 1px solid #e5e7eb; border-radius: 8px; background: white; cursor: pointer; }
    .lang-btn.active { background: #111827; color: white; }
    .lang-section { display: none; }
    .lang-section.active { display: block; }
  `;
  const styleBlock = `<style>${styles}</style>`; // 修复：确保样式变量存在

  // 新增：为标题生成锚点ID，支持 #problems_and_diagnostics 等链接
  const slugify = (text: string): string => {
    if (!text) return 'section';
    return text
      .toLowerCase()
      .normalize('NFKD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/&/g, ' and ')
      .replace(/[^a-z0-9\u4e00-\u9fa5]+/gi, '_')
      .replace(/_{2,}/g, '_')
      .replace(/^_+|_+$/g, '');
  };

  // 新增：解析显式锚点覆盖，如 "{#id}" 或 末尾 "#id"
  const parseHeadingIdAndText = (text: string): { id: string; display: string } => {
    if (!text) return { id: 'section', display: '' };
    const curly = text.match(/\{#([A-Za-z0-9_-]+)\}/);
    if (curly) {
      return { id: curly[1], display: text.replace(curly[0], '').trim() };
    }
    const trailingHash = text.match(/(?:^|\s)#([A-Za-z0-9_-]+)\s*$/);
    if (trailingHash) {
      return { id: trailingHash[1], display: text.replace(trailingHash[0], '').trim() };
    }
    return { id: slugify(text), display: text };
  };

  const renderBody = (): string => {
    let bodyContent = '';
    
    // 添加封面图片
    if (content.coverImage) {
      bodyContent += `<img src="${content.coverImage}" alt="Cover" class="cover-image">`;
    }
    
    // 添加标题（带锚点ID）
    const { id: titleId, display: titleDisplay } = parseHeadingIdAndText(content.title || '');
    bodyContent += `<h1 id="${titleId}">${titleDisplay}</h1>`;
    
    // 添加内容块
    content.content.forEach(block => {
      switch (block.type) {
        case 'heading': {
          const { id, display } = parseHeadingIdAndText(block.content);
          bodyContent += `<h2 id="${id}">${display}</h2>`;
          break;
        }
        case 'paragraph':
          bodyContent += `<p>${block.content}</p>`;
          break;
        case 'image':
          bodyContent += `<img src="${block.content}" alt="Content image">`;
          break;
        case 'list':
          bodyContent += `<ul>${block.content}</ul>`; // 修复：确保列表包含<ul>
          break;
        case 'callout':
          bodyContent += `<div class="callout">${block.content}</div>`;
          break;
        case 'quote':
          bodyContent += `<div class="quote">${block.content}</div>`;
          break;
        default:
          bodyContent += `<p>${block.content}</p>`;
      }
    });

    return bodyContent;
  };

  const pageLang = 'en';
  const titleText = content.title || 'Notion Converted Page';

  // Single-language output: no language switch or bilingual sections
  const body = renderBody();
  
  // Wrap in complete HTML
  return `
    <!DOCTYPE html>
    <html lang="${pageLang}">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${titleText}</title>
      ${styleBlock}
    </head>
    <body>
      <div class="container">
        ${body}
      </div>
    </body>
    </html>
  `;
};

/**
 * 从内容中提取特征列表
 * @param content Notion内容数据
 * @returns 特征数组
 */
const extractFeaturesFromContent = (content: NotionContent): Array<{id: string; title: string; description: string}> => {
  const features: Array<{id: string; title: string; description: string}> = [];
  
  // 检查内容类型，添加相应的特征
  if (content.content.some(item => item.type === 'image')) {
    features.push({
      id: 'feature-1',
      title: 'Beautiful Image Gallery',
      description: 'Includes high-quality images that enhance visual experience'
    });
  }
  
  if (content.content.some(item => item.type === 'list')) {
    features.push({
      id: 'feature-2',
      title: 'Structured Information Lists',
      description: 'Content organized in lists for easier reading and understanding'
    });
  }
  
  if (content.content.some(item => item.type === 'callout')) {
    features.push({
      id: 'feature-3',
      title: 'Highlighted Callouts',
      description: 'Key information highlighted using callout blocks'
    });
  }
  
  if (content.coverImage) {
    features.push({
      id: 'feature-4',
      title: 'Professional Cover Image',
      description: 'A cover image that improves overall aesthetics'
    });
  }
  
  // 如果没有提取到足够的特征，添加默认特征
  if (features.length < 3) {
    const defaultFeatures = [
      {
        id: 'feature-default-1',
        title: 'Elegant Responsive Design',
        description: 'Responsive layout that adapts to all screen sizes'
      },
      {
        id: 'feature-default-2',
        title: 'Readable Typography',
        description: 'Optimized fonts and spacing for a better reading experience'
      },
      {
        id: 'feature-default-3',
        title: 'AI-Optimized Content',
        description: 'Content presentation enhanced with AI suggestions'
      },
      {
        id: 'feature-default-4',
        title: 'Fast Loading Performance',
        description: 'Optimized structure to ensure quick load times'
      },
      {
        id: 'feature-default-5',
        title: 'SEO-Friendly Structure',
        description: 'Page structure aligned with search engine optimization best practices'
      }
    ];
    
    defaultFeatures.forEach(feature => {
      if (!features.some(f => f.title === feature.title) && features.length < 5) {
        features.push(feature);
      }
    });
  }
  
  return features.slice(0, 5); // 最多返回5个特征
};

/**
 * 获取默认图片URL
 * @returns 默认图片URL
 */
const getDefaultImage = (): string => {
  // 提供几个备选的默认图片
  const defaultImages = [
    'https://images.unsplash.com/photo-1618005198919-d3d4b5a92ead?ixlib=rb-4.0.3&auto=format&fit=crop&w=1170&q=80',
    'https://images.unsplash.com/photo-1551434678-e076c223a692?ixlib=rb-4.0.3&auto=format&fit=crop&w=1170&q=80',
    'https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&auto=format&fit=crop&w=1170&q=80'
  ];
  
  // 随机选择一个默认图片
  return defaultImages[Math.floor(Math.random() * defaultImages.length)];
};

/**
 * 创建导出包
 * @param previewData 预览数据
 * @returns Promise<ExportPackage> 导出包信息
 */
export const createExportPackage = async (previewData: PreviewData): Promise<ExportPackage> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1500));
    const safeTitle = previewData.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').trim();
    const fileName = `${safeTitle}-website-package.zip`;
    const htmlFile: CustomFile = {
      name: fileName,
      type: 'application/zip',
      content: '#'
    };
    return {
      htmlFile,
      assets: [],
      metadata: {
        exportDate: new Date().toISOString(),
        version: '1.0.0',
        source: 'AI Notion Converter',
        title: previewData.title,
        description: previewData.description
      }
    };
  } catch (error) {
    console.error('Error creating export package:', error);
    throw new Error('创建导出包失败，请稍后重试。');
  }
};

/**
 * 创建导出包
 * @param manifest: SiteManifest 站点信息
 * @returns Promise<ExportPackage> 导出包信息
 */
export const createSiteExportPackage = async (manifest: SiteManifest): Promise<ExportPackage> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 800));

    const baseCss = `/* base.css */\n:root{--primary:#4F46E5;--text:#1f2937;--muted:#6b7280;--bg:#ffffff}body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;color:var(--text);background:var(--bg);max-width:960px;margin:40px auto;padding:0 20px;line-height:1.7}header{display:flex;align-items:center;gap:12px;margin:20px 0}header .logo{width:28px;height:28px}nav ul{list-style:none;padding:0;margin:0;display:flex;gap:12px;flex-wrap:wrap}nav a{color:var(--primary);text-decoration:none}footer{margin-top:40px;color:var(--muted)}hr{border:0;border-top:1px solid #e5e7eb;margin:20px 0}`;
    const logoSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"28\" height=\"28\"><circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"#4F46E5\"/><text x=\"12\" y=\"16\" text-anchor=\"middle\" font-size=\"10\" fill=\"#fff\" font-family=\"Arial, sans-serif\">AI</text></svg>`;

    const navLinks = manifest.navigation.map(n => `<li><a href=\"pages/${n.slug}.html\">${n.title}</a></li>`).join('');
    const indexHtml = `<!DOCTYPE html><html lang=\"zh\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>${manifest.siteTitle}</title><link rel=\"stylesheet\" href=\"assets/base.css\"></head><body><header><img class=\"logo\" src=\"assets/logo.svg\" alt=\"logo\"/><h1>${manifest.siteTitle}</h1></header><p>页面数：${manifest.pages.length}</p><nav><ul>${navLinks}</ul></nav><hr><footer>生成时间 ${manifest.generatedAt}</footer></body></html>`;

    // 为每个页面注入统一样式
    const pageFiles = manifest.pages.map(p => {
      let html = p.html || '';
      if (html.includes('<head')) {
        html = html.replace('</head>', '<link rel="stylesheet" href="../assets/base.css"></head>');
      } else {
        html = `<!DOCTYPE html><html lang=\"zh\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>${p.title}</title><link rel=\"stylesheet\" href=\"../assets/base.css\"></head><body>${html}</body></html>`;
      }
      return { name: `pages/${p.slug}.html`, type: 'text/html', content: html } as CustomFile;
    });

    const assets: CustomFile[] = [
      { name: 'index.html', type: 'text/html', content: indexHtml },
      { name: 'assets/base.css', type: 'text/css', content: baseCss },
      { name: 'assets/logo.svg', type: 'image/svg+xml', content: logoSvg },
      ...pageFiles
    ];

    const htmlFile: CustomFile = {
      name: 'site-package.zip',
      type: 'application/zip',
      content: '/* zip placeholder */'
    };

    return {
      htmlFile,
      assets,
      metadata: {
        exportDate: new Date().toISOString(),
        version: '2.1.0',
        source: 'AI Notion Platform',
        title: manifest.siteTitle,
        description: `Multi-page site with ${manifest.pages.length} pages (with assets)`
      }
    };
  } catch (error) {
    console.error('Error creating site export package:', error);
    throw new Error('创建站点导出包失败，请稍后重试。');
  }
};

/**
 * 生成预览图（模拟）
 * @param htmlContent HTML内容
 * @returns Promise<string> 预览图URL
 */
export const generatePreviewImage = async (_htmlContent: string): Promise<string> => {
  try {
    // 模拟生成预览图过程
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 返回模拟的预览图URL
    return 'https://via.placeholder.com/800x450?text=Website+Preview';
  } catch (error) {
    console.error('Error generating preview image:', error);
    throw new Error('生成预览图失败');
  }
};